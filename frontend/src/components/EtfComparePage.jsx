import React, { useEffect, useMemo, useState } from 'react'
import { Box, Typography, Chip, Card, CardContent, Grid, Divider, TextField, InputAdornment, Button, Tabs, Tab } from '@mui/material'
import { useComparison } from '../contexts/ComparisonContext.jsx'
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts'
import { Search, Star } from '@mui/icons-material'
import PriceTrendTab from './PriceTrendTab'
import VolumeTrendTab from './VolumeTrendTab'
import FeesTab from './FeesTab'
import HoldingsTab from './HoldingsTab'
import AddPortfolioModal from './AddPortfolioModal'

const CHART_COLORS = ['#5B8DEF', '#22C55E', '#F59E0B', '#EF4444', '#8B5CF6']

const mockLookup = (ticker) => {
  // very simple mocked profiles per ticker
  const baseHoldings = [
    { name: 'Apple Inc', value: 12.1 },
    { name: 'Microsoft', value: 10.8 },
    { name: 'NVIDIA', value: 9.5 },
    { name: 'Amazon', value: 8.2 },
    { name: 'Tesla', value: 6.3 },
  ]
  return {
    name: ticker,
    ticker,
    fee: '0.20%',
    feeLevel: 'Î≥¥ÌÜµ',
    dividendYield: '0.90%',
    dividendLevel: 'ÎÇÆÏùå',
    netAssets: '1.2Ï°∞Ïõê',
    currentPrice: '‚Ç©30,000',
    priceChange: '+0.35%',
    holdings: baseHoldings,
  }
}

const buildTimeseries = (tickers) => {
  const dates = ['12Ïõî 1Ïùº', '12Ïõî 2Ïùº', '12Ïõî 3Ïùº', '12Ïõî 4Ïùº', '12Ïõî 5Ïùº']
  const priceHistory = dates.map((d, idx) => {
    const row = { date: d }
    tickers.forEach((t, i) => {
      row[t] = 30000 + i * 1200 + idx * 250
    })
    return row
  })
  const volumeHistory = dates.map((d, idx) => {
    const row = { date: d }
    tickers.forEach((t, i) => {
      row[t] = 5_000_000 + i * 400_000 + idx * 150_000
    })
    return row
  })
  return { priceHistory, volumeHistory }
}

const buildMockComparisonData = (tickers) => {
  console.warn("‚ö†Ô∏è Ï¢ÖÎ™© Íµ¨ÏÑ± Îç∞Ïù¥ÌÑ∞Í∞Ä mockÏúºÎ°ú ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÏäµÎãàÎã§")
  const { priceHistory, volumeHistory } = buildTimeseries(tickers)
  return {
    aiSummary:
      `${tickers.join(', ')} Ïóê ÎåÄÌïú Îπ†Î•∏ ÏöîÏïΩÏûÖÎãàÎã§. Í∞Å ETFÏùò Î≥¥Ïàò/Î∞∞Îãπ Î∞è ÏÉÅÏúÑ Î≥¥Ïú†Ï¢ÖÎ™©ÏùÑ Í∞ÑÎã® ÎπÑÍµêÌïòÏÑ∏Ïöî. Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Ïó∞Îèô Ïãú Î∞±ÏóîÎìú ÏùëÎãµÏúºÎ°ú ÎåÄÏ≤¥Îê©ÎãàÎã§.`,
    portfolioDetails: tickers.map((t) => mockLookup(t)),
    priceHistory,
    volumeHistory,
  }
}

// yFinance API Ìò∏Ï∂ú Ìï®Ïàò
const fetchYFinanceData = async (ticker) => {
  const url = `http://127.0.0.1:5000/api/etf/info?ticker=${ticker}`
  console.log("üì° yFinance API Ìò∏Ï∂ú ÏãúÏûë:", url)
  
  try {
    const response = await fetch(url)
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }
    
    const data = await response.json()
    console.log("‚úÖ yFinance ÏùëÎãµ ÏàòÏã†:", data)
    
    // ÏùëÎãµ Íµ¨Ï°∞ Í≤ÄÏ¶ù
    if (!data.ticker || !data.name || !Array.isArray(data.holdings)) {
      console.error("‚ùå yFinance ÏùëÎãµÏù¥ ÎπÑÏñ¥ ÏûàÍ±∞ÎÇò Íµ¨Ï°∞Í∞Ä ÏûòÎ™ªÎêòÏóàÏäµÎãàÎã§", data)
      throw new Error("Invalid response structure")
    }
    
    return data
  } catch (error) {
    console.error("‚ùå yFinance API Ìò∏Ï∂ú Ïã§Ìå®:", error)
    throw error
  }
}

// Ïã§Ï†ú yFinance Îç∞Ïù¥ÌÑ∞Î°ú ÎπÑÍµê Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ±
const buildRealComparisonData = async (tickers) => {
  console.log("üîÑ Ïã§Ï†ú yFinance Îç∞Ïù¥ÌÑ∞Î°ú ÎπÑÍµê Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ± ÏãúÏûë")
  
  try {
    const portfolioDetails = await Promise.all(
      tickers.map(async (ticker) => {
        try {
          const data = await fetchYFinanceData(ticker)
          return {
            name: data.name,
            ticker: data.ticker,
            fee: '0.20%', // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ÏóêÏÑúÎäî fee Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎØÄÎ°ú Í∏∞Î≥∏Í∞í
            feeLevel: 'Î≥¥ÌÜµ',
            dividendYield: '0.90%', // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ÏóêÏÑúÎäî dividend Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎØÄÎ°ú Í∏∞Î≥∏Í∞í
            dividendLevel: 'ÎÇÆÏùå',
            netAssets: '1.2Ï°∞Ïõê', // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ÏóêÏÑúÎäî netAssets Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎØÄÎ°ú Í∏∞Î≥∏Í∞í
            currentPrice: '‚Ç©30,000', // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ÏóêÏÑúÎäî price Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎØÄÎ°ú Í∏∞Î≥∏Í∞í
            priceChange: '+0.35%',
            holdings: data.holdings.slice(0, 5).map(h => ({
              name: h.name || h.Stock || 'Unknown',
              value: h.weight || h.Weight || 0
            }))
          }
        } catch (error) {
          console.warn(`üîÅ yFinance Ïã§Ìå® ‚Üí mockDataÎ°ú ÎåÄÏ≤¥Îê® (${ticker})`)
          return mockLookup(ticker)
        }
      })
    )
    
    const { priceHistory, volumeHistory } = buildTimeseries(tickers)
    return {
      aiSummary: `${tickers.join(', ')} Ïóê ÎåÄÌïú Ïã§Ï†ú yFinance Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò Î∂ÑÏÑùÏûÖÎãàÎã§.`,
      portfolioDetails,
      priceHistory,
      volumeHistory,
    }
  } catch (error) {
    console.error("‚ùå Ï†ÑÏ≤¥ yFinance Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ± Ïã§Ìå®:", error)
    console.warn("üîÅ Ï†ÑÏ≤¥ Ïã§Ìå® ‚Üí mockDataÎ°ú ÎåÄÏ≤¥Îê®")
    return buildMockComparisonData(tickers)
  }
}

const EtfComparePage = () => {
  const { tickersToCompare, setTickersToCompare } = useComparison()
  const [comparisonData, setComparisonData] = useState(null)
  const [isLoadingAnalysis, setIsLoadingAnalysis] = useState(false)
  const [aiAnalysisResult, setAiAnalysisResult] = useState('')
  const [isMockData, setIsMockData] = useState(false)
  const [yFinanceConnectionStatus, setYFinanceConnectionStatus] = useState('unknown')
  const [portfolioModalOpen, setPortfolioModalOpen] = useState(false)
  const [initialETFs, setInitialETFs] = useState([])
  const [activeTab, setActiveTab] = useState(0)

  useEffect(() => {
    const loadComparisonData = async () => {
      if (tickersToCompare && tickersToCompare.length > 0) {
        console.log("üîÑ ETF ÎπÑÍµê Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏãúÏûë:", tickersToCompare)
        
        try {
          // Ïã§Ï†ú yFinance API Ìò∏Ï∂ú ÏãúÎèÑ
          const results = await buildRealComparisonData(tickersToCompare)
          setComparisonData(results)
          setIsMockData(false)
          setYFinanceConnectionStatus('connected')
          console.log("‚úÖ Ïã§Ï†ú yFinance Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏôÑÎ£å")
        } catch (error) {
          console.error("‚ùå yFinance Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïã§Ìå®, mock Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©:", error)
          const results = buildMockComparisonData(tickersToCompare)
          setComparisonData(results)
          setIsMockData(true)
          setYFinanceConnectionStatus('failed')
        }
        
        setTickersToCompare([])
      }
    }
    loadComparisonData()
  }, [tickersToCompare, setTickersToCompare])

  // yFinance Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Ìï®Ïàò
  const testYFinanceConnection = async () => {
    console.log("üß™ yFinance Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ ÏãúÏûë")
    setYFinanceConnectionStatus('testing')
    
    try {
      const testTicker = 'VOO'
      const data = await fetchYFinanceData(testTicker)
      console.log("‚úÖ yFinance Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ:", data)
      setYFinanceConnectionStatus('connected')
      alert(`yFinance Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ!\nÌã∞Ïª§: ${data.ticker}\nÏù¥Î¶Ñ: ${data.name}\nÎ≥¥Ïú†Ï¢ÖÎ™© Ïàò: ${data.holdings.length}`)
    } catch (error) {
      console.error("‚ùå yFinance Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Ïã§Ìå®:", error)
      setYFinanceConnectionStatus('failed')
      alert(`yFinance Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Ïã§Ìå®!\nÏò§Î•ò: ${error.message}`)
    }
  }

  const handleAnalysisClick = async () => {
    if (!comparisonData) return
    const selected = comparisonData.portfolioDetails.map((p) => p.ticker)
    if (selected.length === 0) return

    setIsLoadingAnalysis(true)
    setAiAnalysisResult('')
    try {
      const res = await fetch('http://127.0.0.1:5000/api/etf/analyze', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ tickers: selected }),
      })
      if (!res.ok) throw new Error('AI analysis failed')
      const data = await res.json()
      setAiAnalysisResult(data.analysis)
    } catch (e) {
      console.error('Error during AI analysis:', e)
      if (e.message.includes('Failed to fetch') || e.message.includes('Connection refused')) {
        setAiAnalysisResult("Î∞±ÏóîÎìú ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§. ÏÑúÎ≤ÑÍ∞Ä Ïã§Ìñâ Ï§ëÏù∏ÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.")
      } else {
        setAiAnalysisResult("AI Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.")
      }
    } finally {
      setIsLoadingAnalysis(false)
    }
  }

  const handlePortfolioRegisterClick = () => {
    if (!comparisonData || comparisonData.portfolioDetails.length === 0) return
    
    // ÏÑ†ÌÉùÎêú ETFÎì§ÏùÑ Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞Î°ú ÏÑ§Ï†ï
    const selectedETFs = comparisonData.portfolioDetails.map(etf => {
      // Ìã∞Ïª§Î•º Í∏∞Î∞òÏúºÎ°ú ÏãúÏû• Íµ¨Î∂Ñ ÌåêÎã® (ÌïúÍµ≠ Ìã∞Ïª§Îäî Ïà´ÏûêÎ°ú ÏãúÏûë)
      const isKoreanTicker = /^\d/.test(etf.ticker)
      return {
        ticker: etf.ticker,
        name: etf.name,
        market: isKoreanTicker ? 'Íµ≠ÎÇ¥' : 'Ìï¥Ïô∏',
        percentage: (100 / comparisonData.portfolioDetails.length).toFixed(1)
      }
    })
    
    setInitialETFs(selectedETFs)
    setPortfolioModalOpen(true)
  }

  const handlePortfolioSave = (portfolioData) => {
    // localStorageÏóê Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ï†ÄÏû•
    const portfolios = JSON.parse(localStorage.getItem('portfolios') || '[]')
    const newPortfolio = {
      id: Date.now().toString(),
      ...portfolioData,
      createdAt: new Date().toISOString()
    }
    portfolios.push(newPortfolio)
    localStorage.setItem('portfolios', JSON.stringify(portfolios))
    
    // ÏÑ±Í≥µ ÌÜ†Ïä§Ìä∏ Î©îÏãúÏßÄ (Í∞ÑÎã®Ìïú alertÎ°ú ÎåÄÏ≤¥)
    alert('Ìè¨Ìä∏Ìè¥Î¶¨Ïò§Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!')
  }

  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue)
  }

  const header = useMemo(
    () => (
      <>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Box>
            <Typography variant="h4" sx={{ color: 'white', fontWeight: 700, mb: 1 }}>
              ETF ÎπÑÍµê
            </Typography>
            <Typography sx={{ color: '#9aa4d4', mb: 1 }}>
              ÏÑ†ÌÉùÌïú Ìã∞Ïª§Î•º Í∏∞Î∞òÏúºÎ°ú ÏÉÅÏÑ∏ ÎπÑÍµêÎ•º Ï†úÍ≥µÌï©ÎãàÎã§
            </Typography>
            {comparisonData && (
              <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
                <Chip 
                  label={isMockData ? "Î™®Ïùò Îç∞Ïù¥ÌÑ∞" : "Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞"} 
                  color={isMockData ? "warning" : "success"}
                  size="small"
                />
                <Chip 
                  label={`yFinance: ${yFinanceConnectionStatus === 'connected' ? 'Ïó∞Í≤∞Îê®' : yFinanceConnectionStatus === 'failed' ? 'Ïã§Ìå®' : yFinanceConnectionStatus === 'testing' ? 'ÌÖåÏä§Ìä∏Ï§ë' : 'Ïïå Ïàò ÏóÜÏùå'}`}
                  color={yFinanceConnectionStatus === 'connected' ? "success" : yFinanceConnectionStatus === 'failed' ? "error" : "default"}
                  size="small"
                />
              </Box>
            )}
          </Box>
          <Button 
            variant="outlined" 
            onClick={testYFinanceConnection}
            disabled={yFinanceConnectionStatus === 'testing'}
            sx={{ minWidth: 150 }}
          >
            {yFinanceConnectionStatus === 'testing' ? 'ÌÖåÏä§Ìä∏ Ï§ë...' : 'yFinance Ïó∞Í≤∞ ÌÖåÏä§Ìä∏'}
          </Button>
        </Box>
      </>
    ),
    [comparisonData, isMockData, yFinanceConnectionStatus],
  )

  if (!comparisonData) {
    return (
      <Box sx={{ p: 3 }}>
        {header}
        <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', mb: 2 }}>
          {(tickersToCompare || []).map((t) => (
            <Chip key={t} label={t} sx={{ backgroundColor: '#0a0e27', color: 'white' }} />
          ))}
        </Box>
        <Card sx={{ backgroundColor: '#1a1f3a' }}>
          <CardContent>
            <Typography sx={{ color: 'white', mb: 1, fontWeight: 600 }}>ETF Í≤ÄÏÉâ</Typography>
            <TextField
              fullWidth
              placeholder="ETF Ïù¥Î¶Ñ, Ìã∞Ïª§, ÏÑπÌÑ∞Î°ú Í≤ÄÏÉâ"
              variant="outlined"
              sx={{
                '& .MuiOutlinedInput-root': {
                  backgroundColor: '#0a0e27',
                  borderRadius: 2,
                  '& fieldset': { borderColor: '#333' },
                },
                '& .MuiInputBase-input': { color: 'white' },
              }}
              InputProps={{ startAdornment: (<InputAdornment position="start"><Search sx={{ color: '#1976d2' }} /></InputAdornment>) }}
            />
            <Typography sx={{ color: '#9aa4d4', mt: 2 }}>Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ïπ¥ÎìúÏóêÏÑú "Ï†ÑÏ≤¥ ÎπÑÍµêÌïòÍ∏∞"Î•º ÌÅ¥Î¶≠ÌïòÎ©¥ ÏûêÎèôÏúºÎ°ú Î∂àÎü¨ÏòµÎãàÎã§.</Typography>
          </CardContent>
        </Card>
      </Box>
    )
  }

  const selectedEtfs = comparisonData.portfolioDetails.map((p) => ({ name: p.name, ticker: p.ticker }))

  return (
    <Box sx={{ p: 3, width: '100%', maxWidth: '1400px', mx: 'auto' }}>
      {header}

      {/* AI Î∂ÑÏÑù */}
      <Card sx={{ backgroundColor: '#1a1f3a', borderRadius: 2, mb: 3 }}>
        <CardContent sx={{ p: 3 }}>
          <Typography variant="h6" sx={{ color: 'white', fontWeight: 'bold', mb: 1 }}>
            ETF holic AI Î∂ÑÏÑù
          </Typography>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
            <Typography variant="body2" sx={{ color: 'white', opacity: 0.9, lineHeight: 1.7 }}>
              {isLoadingAnalysis
                ? 'AIÍ∞Ä Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§...'
                : (aiAnalysisResult || 'ÎπÑÍµêÌï† ETFÎ•º ÏÑ†ÌÉùÌïòÍ≥† \"Î∂ÑÏÑùÌïòÍ∏∞\" Î≤ÑÌäºÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî.')}
            </Typography>
            <Box sx={{ display: 'flex', gap: 1 }}>
              <Button 
                variant="outlined" 
                startIcon={<Star />}
                onClick={handlePortfolioRegisterClick}
                disabled={!comparisonData || comparisonData.portfolioDetails.length === 0}
                sx={{
                  borderColor: '#1976d2',
                  color: '#1976d2',
                  '&:hover': {
                    borderColor: '#1976d2',
                    backgroundColor: 'rgba(25, 118, 210, 0.08)',
                  },
                  '&:disabled': {
                    opacity: 0.5,
                    cursor: 'not-allowed',
                  }
                }}
              >
                ÎÇòÏùò Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Îì±Î°ù
              </Button>
              <Button variant="contained" onClick={handleAnalysisClick} disabled={isLoadingAnalysis}>
                Î∂ÑÏÑùÌïòÍ∏∞
              </Button>
            </Box>
          </Box>
        </CardContent>
      </Card>

      {/* ÌÉ≠ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
      <Card sx={{ backgroundColor: '#1a1f3a', borderRadius: 2, mb: 3 }}>
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs 
            value={activeTab} 
            onChange={handleTabChange}
            sx={{
              '& .MuiTab-root': {
                color: '#9aa4d4',
                '&.Mui-selected': {
                  color: '#5B8DEF',
                },
              },
              '& .MuiTabs-indicator': {
                backgroundColor: '#5B8DEF',
              },
            }}
          >
            <Tab label="Ï¢ÖÎ™© Íµ¨ÏÑ±" />
            <Tab label="Ï£ºÍ∞Ä Ï∂îÏù¥" />
            <Tab label="Í±∞ÎûòÎüâ/Í±∞ÎûòÎåÄÍ∏à" />
            <Tab label="ÏàòÏàòÎ£å Î∞è Î∂ÑÎ∞∞Í∏à" />
          </Tabs>
        </Box>
        
        <CardContent sx={{ p: 3 }}>
          {activeTab === 0 && (
            <HoldingsTab selectedETFs={comparisonData?.portfolioDetails || []} />
          )}
          {activeTab === 1 && (
            <PriceTrendTab etfs={selectedEtfs} period="1y" />
          )}
          {activeTab === 2 && (
            <VolumeTrendTab etfs={selectedEtfs} period="1y" />
          )}
          {activeTab === 3 && (
            <FeesTab rows={comparisonData?.portfolioDetails || []} />
          )}
        </CardContent>
      </Card>

      {/* Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Îì±Î°ù Î™®Îã¨ */}
      <AddPortfolioModal 
        open={portfolioModalOpen}
        onClose={() => setPortfolioModalOpen(false)}
        onSave={handlePortfolioSave}
        initialETFs={initialETFs}
      />
    </Box>
  )
}

export default EtfComparePage
